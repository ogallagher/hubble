√ category icon√ help icon√ author icon√ description icon√ tag icon√ use window.prompt() for search√ loading display√ send search request to server w/ data object√ read search requests in the server√ execute search requests server-side; oscillation from lexicographical origin√ load search results into bubble tree> add "more" bubble capability> > if bubbles.branches > MAX_BRANCHES, display a more bubble > > the icon is: (•••)> > when pressed, bubble.bubbles changes to display the rest of the results (disable selection of the more bubble——perhaps with bubble.link = "/more")√ add Box option for Bubble.link√ shift bubbles with dialogue to the corner in mobile browsers√ create search.name and search.tags once the server returns matching games√ add some more example/fake games into the games.json file server-side√ don't display bubble.link if it contains a / character√ remove games.categories√ add games.tags to bubble tree√ name icon√ enable games.image display for both featured games and searched games√ initiate a new search by tag when a game.tags.bubble is selected, or when a categories.bubble is selected√ rewrite search algorithm to factor in the games' ratings• write the help menu· √ read: tap on the bubble again to flip to the next page· √ return: tap on the background to return to the previous bubble· √ select: tap on a bubble to select it; drag the finger around to screen to see labels· √ search: tap the search bubble to insert search terms; tapping on tags and categories does so automatically· > rate: first, register and log in; then, go to any game and select the rating bubble. 5 stars will appear, and you can choose however many you see fit.· > register: go to accounts, register and create email+password; then go to accounts,login…· √ play: select a game bubble to go to that game’s website· > curate:…√ enable client to rate games (only after creating an account with an email address and password)√ √ client: edit /login to store incoming account.reviews√ √ client: add # (1-5) bubbles that branch off of games.rating√ √ √ in response to searched (name,tag) game additions√ √ √ in response to /featured game additions√ √ √ #.fill is determined by numStars OR account.reviews√ √ √ √ numStars = bubble.label.name if (bubble.link == “/rate” && this.focused)√ √ √ √ if (numStars >= #.label.name || #.focused), fill(255) √ √ √ if address == "", prompt for the user to register or log in on select()√ √ √ if address.length > 0, add branches to game.rating, which send /rate get to server on select()√ √ √ handle server’s response to /rate: update game.rating and account.reviews√ √ √ √ fix alterations of game.rating and account.reviews. The former appends as a string, and the latter doesn’t seem to change at all -> I think the query’s JSON wasn’t parsed correctly server-side√ √ server: add game.reviews to store the number of people that have rated the game√ √ server: add account.reviews to store the games and that users have rated, and what ratings they gave (account.reviews.[game,rating])√ √ √ edit /register handler function√ √ server: handle /rate html get√ √ √ to update, game.rating = (game.rating * game.reviews / game.reviews+1) + (NEW_VALUE / game.reviews+1)√ √ √ if account.reviews contains this game already, game.rating += RATING_CHANGE / game.reviews√ √ √ update account.reviews√ √ √ send response to client√ enable dialogue box page flipping√ √ page splitting character will denote multiple pages√ √ bubble.book stores many-paged dialogue boxes√ √ update bubble.book.bookMark when bubble.select() is called and bubble.selected is true√ √ change bubble.displayText()√ add more games that are mobile-compatible and more varied in type• server.addGame() function:· > add to games.byName[] lexicographically· > add to games.byRating[] according to current game.rating√ client: mobile: in displayText(), enable box movement to all 4 corners of the view√ enable registration and log-in√ √ client: add register bubble√ √ client: add login bubble√ √ client: add address variable√ √ client: register() function: email, password; send email;√ √ client: login() function: get email, password; send to server for verification; upon positive response, continue; upon negative response, alert failure√ √ server: use nodemailer.js to send the email to a specified destination account (origin server = gmail.com)√ √ server: handle /register and /login html requests√ √ server: add accounts.json to store emails and passwords√ √ server: use filesystems module to rewrite accounts.json in /register handling√ if bubble.link is a dialogue box, and if bubble.link.length < SEAL_MAX, display bubble.link around the bottom like label.name, but without grow/shrink and disappear√ fix authors bubble to display each author on a separate branch√ don’t display bubble.link in the corner if already displayed around the bubble√ fix display of bubble.label.name√ √ create client-wide and mobile-wide variable: hovering√ √ hovering = true, if (distance(bubble,cursor) < bubble.size*0.5 && touches.length > 0)√ √ background darkens√ √ increase circumference for bubble.label.name display√ √ create bubble.touched variable (to see which bubble is activating hovering)√ √ other bubbles darken√ server: fix search functions to not return repeat games• category icons· √ version· √ multiplayer· √ racing· √ strategy· √ action· √ puzzle· · adventure¿ what to do with author bubbles ?¿ ¿ link to author’s website ?¿ ¿ server: add authors.json with associated information ?√ if bubble.label.name is too long, show until NAME_MAX√ mobile: only call home.select() if tapped (not dragged and lifted)√ mobile: if background tapped, be able to go back to home without closing all branches√ register icon√ login icon¿ Create a way to recover the account password ?√ server: create searchGames() functions to lessen redundancy in usage between /search response and /rate response√ encrypt passwords√ √ client: don’t permit spaces in passwords√ √ server: encrypt passwords before storing in accounts.json for registration√ √ server: encrypt incoming password to check if login is valid• add random bubble· √ client: random icon· > client: create /random query from bubble· > server: /random html get handler returns a random game from games.byName· > client: add resultant game branch to random bubble√ server: prevent redundant search results that appear for overlapping search terms√ server: update games.byTag’s order in the /rate request handler function by deleting the edited game from its current position and then putting it back according to newRating√ client: #bubble.fill if account.reviews contains it’s game and account.reviews[r].rating >= this.label.name√ client: don't mute stars in mobile√ client: don't deselect and return home after rating or trying to rate√ client: add account.information.[…]√ √ reviews√ √ username√ √ register date (bday)√ √ age√ √ curator status√ √ the above categories are stored in an info (i) bubble’s dialogue box√ sometimes passwords won’t save correctly and aren’t recognized by the server upon login…√ client: move cursor to center after release in select() function√ x client: move cursor to corner if bubble.link is a text box—— too difficult to implement; not worth the trouble√ client: add loading variable to Bubble class, so other bubbles don’t pulse when fetching information√ √ fix loading animation for origin bubbles, so they stop pulsing when their branches are no longer loading? create way to add games? √ client: add curate bubble branch off of the account bubble? ? ? on select, if curator, open a prompt for:? ? ? ? url,? ? ? ? name (starts w/ capital letter, only letters, numbers, and spaces),? ? ? ? description (inserts page breaks for lengthier ones),? ? ? ? authors,? ? ? ? rating, and? ? ? ? tags? ? ? ? then send /curate request to server with the specified newGame data to be stored in submissions.json, until the hubble admin handles the new addition? ? √ on select, it not curator, send /curate request to server? √ server: create submissions.json? √ server: add account.[curator,bday] and change registration and login handlers? √ server: handle registration? ? server: handle /curate request? ? ? if account.curator, add submission to submissions.json? ? √ else, change account.curator to null and send notary email to hubbleojpgapps@gmail.com? ? create way to add game icons? ? ? new game_icons directory to be stored where the .json files are stored (the directory will be edited from the admin interface)> move .json files and game_icons directory out of the hubble directory so that they aren’t overwritten when I update the website• create admin interface for hubbleojpgapps@gmail.com (replace curate bubble with an edit.[accounts,games] bubble)· ? accounts· ? ? open a prompt filled in with the current data from accounts.json· ? ? on close of prompt, accounts.json file is replaced with the edited version· · games· · · games.append (+)· · · · add an application branch for every submission from submissions.json· · · · application.link = submissions[i]· · · · on application.select(), open a prompt with application.link· · · · · on close of prompt, open a png file input for the game's icon· · · · · send game data with submission index to the server· · · · server: add game to games.json and send email to appropriate curator· · ? games.replace· · ? ? same as edit.accounts√ handle null possibility as account.curator√ make sure /featured and /search client responses handle my read errors sent from the server (when game icon files are not found)√ disable selection of hidden bubbles√ select account(or admin) bubble after login√ client: edit.accounts: set accounts bubble.loading to -1 when admin edit == null