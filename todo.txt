√ category icon√ help icon√ author icon√ description icon√ tag icon√ use window.prompt() for search√ loading display√ send search request to server w/ data object√ read search requests in the server√ execute search requests server-side; oscillation from lexicographical origin√ load search results into bubble tree> add "more" bubble capability> > if bubbles.branches > MAX_BRANCHES, display a "more" bubble> > when pressed, bubble.bubbles changes to display the rest of the results (disable selection of the "more" bubble——¿perhaps with bubble.link = "\more"?)√ add dialogueBox option for Bubble.link√ shift bubbles with dialogue to the corner in mobile browsers√ create search.name and search.tags once the server returns matching games√ add some more example/fake games into the games.json file server-side√ don't display bubble.link if it contains a / character√ remove games.categories√ add games.tags to bubble tree√ name icon√ enable games.image display for both featured games and searched games√ initiate a new search by tag when a game.tags.bubble is selected, or when a categories.bubble is selected√ rewrite search algorithm to factor in the games' ratings· write the help menu
> √ read: tap on the bubble again to flip to the next page
> √ return: tap on the background to return to the previous bubble
> √ select: tap on a bubble to select it; drag the finger around to screen to see labels
> √ search: tap the search bubble to insert search terms; tapping on tags and categories does so automatically
> > rate: first, register and log in; then,…
> > register: go to accounts,register and create email+password; then go to accounts,login…
> √ play: select a game bubble to go to that game’s website· enable client to rate games (only after creating an account with an email address and password)
> ? client: edit /login to store incoming account.reviews
> > client: add # (1-5) bubbles that branch off of games.rating
> > ? in response to searched (name,tag) game additions
> > > in response to /featured game additions
> > > #.fill is determined by account.reviews> > > if address == "", prompt for the user to register or log in on select()> > > if address.length > 0, add branches to game.rating, which send /rate get to server on select()
> > > handle server’s response to /rate: update game.rating, game.rating.#, and account.reviews> √ server: add game.reviews to store the number of people that have rated the game
> ? server: add account.reviews to store the games and that users have rated, and what ratings they gave (account.reviews.[game,rating])
> ? √ edit /register handler function> ? server: handle /rate html get> ? √ to update, game.rating = (game.rating * game.reviews / game.reviews+1) + (NEW_VALUE / game.reviews+1)> ? √ if account.reviews contains this game already, game.rating += RATING_CHANGE / game.reviews
> ? √ update account.reviews
> ? √ send response to client√ enable dialogue box page flipping√ √ page splitting character will denote multiple pages√ √ bubble.book stores many-paged dialogue boxes√ √ update bubble.book.bookMark when bubble.select() is called and bubble.selected is true√ √ change bubble.displayText()√ add more games that are mobile-compatible and more varied in type> server.addGame() function:> > add to games.byName[] lexicographically> > add to games.byRating[] according to current game.rating√ client: mobile: in displayText(), enable box movement to all 4 corners of the view√ enable registration and log-in√ √ client: add register bubble√ √ client: add login bubble√ √ client: add address variable√ √ client: register() function: email, password; send email;√ √ client: login() function: get email, password; send to server for verification; upon positive response, continue; upon negative response, alert failure√ √ server: use nodemailer.js to send the email to a specified destination account (origin server = gmail.com)√ √ server: handle /register and /login html requests√ √ server: add accounts.json to store emails and passwords√ √ server: use filesystems module to rewrite accounts.json in /register handling√ if bubble.link is a dialogue box, and if bubble.link.length < SEAL_MAX, display bubble.link around the bottom like label.name, but without grow/shrink and disappear√ fix authors bubble to display each author on a separate branch> don’t display bubble.link in the corner if already displayed around the bubble√ fix display of bubble.label.name√ √ create client-wide and mobile-wide variable: hovering√ √ hovering = true, if (distance(bubble,cursor) < bubble.size*0.5 && touches.length > 0)√ √ background darkens√ √ increase circumference for bubble.label.name display√ √ create bubble.touched variable (to see which bubble is activating hovering)√ √ other bubbles darken√ server: fix search functions to not return repeat games· category icons√ √ version√ √ multiplayer√ √ racing> > strategy> > action√ √ puzzle> > adventure¿ what to do with author bubbles ?¿ ¿ link to author’s website ?¿ ¿ server: add authors.json with associated information ?√ if bubble.label.name is too long, show until NAME_MAX√ mobile: only call home.select() if tapped (not dragged and lifted)√ mobile: if background tapped, be able to go back to home without closing all branches√ register icon√ login icon¿ Create a way to recover the account password ?
√ server: create searchGames() functions to lessen redundancy in usage between /search response and /rate response
√ encrypt passwords
√ √ client: don’t permit spaces in passwords
√ √ server: encrypt passwords before storing in accounts.txt for registration
√ √ server: encrypt incoming password to check if login is valid
> add random bubble
> > client: random icon
> > client: create /random query from bubble
> > server: /random html get handler returns a random game from games.byName