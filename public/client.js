/* * * Description: A webpage with a bubble-chart layout for a game site * Author: Owen Gallagher * Start Date: 1 October 2016 * *///generalvar canvas;var parentID = "main";var images = [];                    //stores the image data for icons that I created (not game thumbnails)var w = 500;var camera;var mobile = false;var hovering = false;               //if, for any bubble a, (a.focused && a.touched)var touchOrigin;var home;//user-specificvar account = {                     //when the user signs in, address is set to the user's email address    address: "",    reviews: [],    curator: false,    bday: null,    age: null};var featuredGames = [];             //0 ... 9       0 to 9 refer to featuredGames[image]var randomGames = [];               //10 ... 14     10 to 14 refer to randomGames[image-10]var searchedGames = [];             //15 ... ∞      10 and up refer to searchedGames[image-15]var searchTerms = "";               //used for bubbles with link == "/newSearch"var numStars = -1;                  //used for bubbles with link == "/rate"var currentGame = null;             //used for bubbles with link == "/rate" to identify the parent game; it's a pointer to the last game seen by the uservar imageUpload = null;             //used for admin interface, to upload a game icon before adding it to games.json//constantsvar HOST_NAME = "http://hubble-2-sfdpp-hubble.193b.starter-ca-central-1.openshiftapps.com";var MOBILE_ZOOM = 0.7;var FAN = 1.7;var PAGE_BREAK = " ——>";var LINE_BREAK = "*";var SEAL_MAX = 10;                  //maximum length of bubble.link for it to be displayed around the bottom instead of in the corner of the windowvar PAGE_LENGTH = 150;               //maximum length of bubble.book.page for it to be spliced into separate pagesvar NAME_MAX = 0.75;                //maximum proportion of circumference dedicated to bubble.label.name for it to be displayed with all lettersvar UPPER_CASE_REGEX = /^[A-Z0-9]/;    //used to check if the bubble is a game (all games are uppercase), meaning that its thumbnail won't come from images[].//--------------------------------------------------------------------- SETUPfunction preload() {    images.push(loadImage("./images/home0.png"));           // 0    images.push(loadImage("./images/home1.png"));    images.push(loadImage("./images/search0.png"));    images.push(loadImage("./images/search1.png"));    images.push(loadImage("./images/star0.png"));    images.push(loadImage("./images/star1.png"));    images.push(loadImage("./images/categories0.png"));    images.push(loadImage("./images/categories1.png"));    images.push(loadImage("./images/i0.png"));    images.push(loadImage("./images/i1.png"));    images.push(loadImage("./images/help0.png"));           // 10    images.push(loadImage("./images/help1.png"));    images.push(loadImage("./images/author0.png"));    images.push(loadImage("./images/author1.png"));    images.push(loadImage("./images/description0.png"));    images.push(loadImage("./images/description1.png"));    images.push(loadImage("./images/tag0.png"));    images.push(loadImage("./images/tag1.png"));    images.push(loadImage("./images/name0.png"));    images.push(loadImage("./images/name1.png"));    images.push(loadImage("./images/version0.png"));        // 20    images.push(loadImage("./images/version1.png"));    images.push(loadImage("./images/register0.png"));    images.push(loadImage("./images/register1.png"));    images.push(loadImage("./images/login0.png"));    images.push(loadImage("./images/login1.png"));    images.push(loadImage("./images/random0.png"));    images.push(loadImage("./images/random1.png"));    images.push(loadImage("./images/+0.png"));    images.push(loadImage("./images/+1.png"));    images.push(loadImage("./images/multiplayer0.png"));    // 30   at the end of the list, I'll put icons that will never be selected (which only have one used version)    images.push(loadImage("./images/racing1.png"));    images.push(loadImage("./images/puzzle1.png"));    images.push(loadImage("./images/action1.png"));    images.push(loadImage("./images/strategy1.png"));    images.push(loadImage("./images/adventure1.png"));    images.push(loadImage("./images/corduroy.jpg"));}function setup() {    canvas = createCanvas(document.getElementById(parentID).offsetWidth,document.getElementById(parentID).offsetHeight);    canvas.parent(parentID);        w = getDimension();        camera = new Camera();        mobile = mobileCheck();        home = new Bubble(0,0,0.5,0.5,0,0.4,new Label(0,"hubble"),7,""); //∆X,∆Y,anchorX,anchorY,initial,size,label,branches,link            home.addBranch(1,2,0.3,new Label(2,"search"),0,"/search");                                       //diametersAway,fan,size,label,branches,link            home.addBranch(1,2,0.3,new Label(4,"featured"),0,"/featured");            home.addBranch(1,2,0.3,new Label(6,"categories"),7,"");            home.bubbles[2].addBranch(1,FAN,0.3,new Label(34,"strategy"),0,"/newSearch");            home.bubbles[2].addBranch(1,FAN,0.3,new Label(33,"action"),0,"/newSearch");            home.bubbles[2].addBranch(1,FAN,0.3,new Label(19,"singleplayer"),0,"/newSearch");            home.bubbles[2].addBranch(1,FAN,0.3,new Label(30,"multiplayer"),0,"/newSearch");            home.bubbles[2].addBranch(1,FAN,0.3,new Label(35,"adventure"),0,"/newSearch");            home.bubbles[2].addBranch(1,FAN,0.3,new Label(31,"race"),0,"/newSearch");            home.bubbles[2].addBranch(1,FAN,0.3,new Label(32,"puzzle"),0,"/newSearch");            home.addBranch(1,2,0.3,new Label(18, "account"),2,"");            home.bubbles[3].addBranch(1,FAN,0.3,new Label(24,"login"),0,"/login");            home.bubbles[3].addBranch(1,FAN,0.3,new Label(22,"register"),0,"/register");            home.addBranch(1,2,0.3,new Label(8,"about"),3,"");            home.bubbles[4].addBranch(1,FAN,0.3,new Label(12,"author"),0,"Owen Gallagher began creating hubble on 1 October 2016, at the beginning of his freshman year in college.");            home.bubbles[4].addBranch(1,FAN,0.3,new Label(14,"description"),0,"hubble is a game hosting site, with a layout inspired by bubble charts and satellites.");            home.bubbles[4].addBranch(1,FAN,0.3,new Label(20,"version"),0,"01-15-2018");        if (mobile) {        home.addBranch(1,2,0.3,new Label(10,"help"),0,"READ: See the arrow at the end of this text? That means there's more to read. To see the next page, tap the help bubble again. " + PAGE_BREAK + "RETURN: I've detected that you're using a mobile device. To go back on a mobile device, tap the background. " + PAGE_BREAK + "SELECT: Drag your finger around the window to see the bubble labels. To select one, just tap it. " + PAGE_BREAK + "SEARCH (1): Tap the search bubble to input search terms. Searches are not case sensitive and ignore punctuation, so just use letters, numbers and spaces. " + PAGE_BREAK + "SEARCH (2): If you tap on one of the game's tags, a new search will be executed with that tag as the search term. The same happens if you tap on a category bubble. " + PAGE_BREAK + "RATE: To be able to rate games, you need to register or sign-in with a username and password, so no one person can rate the same game multiple times. " + PAGE_BREAK + "REGISTER: It's free and quick. Just... " + PAGE_BREAK + "PLAY: Tap game bubble to play it.");            touchOrigin = {            x: 0.00,            y: 0.00        };    }    else {        home.addBranch(1,2,0.3,new Label(10,"help"),0,"READ: See the arrow at the end of this text? That means there's more to read. To see the next page, click the help bubble again. " + PAGE_BREAK + "RETURN: I've detected that you're using a PC. On a PC, click the background to return home. To go back, move the cursor to find the previous bubble and click it. " + PAGE_BREAK + "SEARCH (1): Click on the search bubble to input search terms. Searches are not case sensitive and ignore punctuation, so just use letters, numbers, and spaces. " + PAGE_BREAK + "SEARCH (2): If you click one of the game's tags, a new search will be executed with that tag as the search term. The same happens if you click a category bubble. " + PAGE_BREAK + "RATE: To be able to rate games, you need to register or sign-in with a username and password, so no one person can rate the same game multiple times. " + PAGE_BREAK + "REGISTER: It's free and quick. Just... " + PAGE_BREAK + "PLAY: click on a game bubble to play it.");    }            home.addBranch(1,2,0.3,new Label(26, "random"),0,"/random");        home.checkBook();}//--------------------------------------------------------------------- DRAWfunction draw() {    if (hovering) {        tint(60);    }    image(images[images.length-1],0,0,images[images.length-1].width,images[images.length-1].height,0,0,width,height);    //TEMPORARY ^^        home.interact(); //update bubbles    home.extendBranches();    home.updateAnchor();    home.enableBranches();  //interact(), extendBranches(), update(), and enable() for this.bubbles    home.display();         //displays are done last    home.displayText();        hovering = false; //these are global variables that change if ANY bubble satisfies the condition    numStars = 0;        camera.zoom(); //update camera    camera.move();}//--------------------------------------------------------------------- GENERAL FUNCTIONS//---------------------------------- RESIZE WINDOWfunction getDimension() {    var dimension = height;        if (width < height) {        dimension = width;    }        return dimension;}//---------------------------------- CHECK MOBILEfunction mobileCheck() {    //adapted from http://detectmobilebrowsers.com/ open-source code        var check = false;        (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);        return check;}//--------------------------------------------------------------------- CLASSES//---------------------------------- BUBBLEfunction Bubble(x,y,ax,ay,i,s,l,b,u) {    this.location = new p5.Vector(x,y);    this.anchor = new p5.Vector(ax,ay);    this.initial = i; //direction of this bubble to determine those of its branches    this.size = s; //diameter    this.label = l; //display on bubble    this.selected = false; //sets camera.anchor to bubble.location    this.origin = false; //if one of bubble.bubbles is selected, whiten branch    this.focused = false; //if cursor is over the bubble    this.touched = false; //if focused and touches.length > 1    this.extension = 0.00; //for activating bubbles    this.bubbles = []; //bubbles attached to this one    this.branches = b; //number of bubbles attached    this.link = u; //link can be a url to a specific game site (http:), a routed GET request to the server (/), or a dialogue box    this.book = null; //variable to keep track of what part of a dialogue box to display, if there are multiple pages        this.loading = -1; //when fetching data from the server, the bubble will pulse according to loading    this.parentGameRating = -1; //variable used only for highlighting # star bubbles; resets to -1 each time before a new game changes game.bubbles[3].bubbles.parentGameRating to accountRating        this.addBranch = function(d,f,s,l,b,u) { //add element to this.bubbles;        var angle = f*PI;        angle = ((angle/this.branches) * (this.bubbles.length+0.5)) + this.initial;                var branch = new p5.Vector(cos(angle),sin(angle));        branch.mult(d*(this.size));                angle -= (1-((2-FAN)*0.5))*PI;        if (angle > 2*PI) {            angle -= 2*PI;        }        else if (angle < 0) {            angle += 2*PI;        }                this.bubbles.push(new Bubble(branch.x,branch.y,((this.anchor.x*width) + (this.location.x*w)) / width,((this.anchor.y*height) + (this.location.y*w)) / height,angle,this.size*s,l,b,u));    }        this.checkBook = function() { //sees whether this.link is a dialogue box, and if it has many pages        if (this.link.indexOf(PAGE_BREAK) > -1) {            this.book = {                bookmark: 0,                pages: this.link.split(PAGE_BREAK)            };                        for (var i=0; i<this.book.pages.length; i++) {                this.book.pages[i] += PAGE_BREAK;            }                        this.link = "";        }                for (var i=0; i<this.bubbles.length; i++) {            this.bubbles[i].checkBook();        }    }        this.interact = function() { //change size on hover; re-anchor camera if selected; this.origin if any branches are selected; update hovering        var difference = new p5.Vector(mouseX,mouseY);                var drawLocation = new p5.Vector(this.anchor.x * width,this.anchor.y * height);        drawLocation.add(this.location.x*w,this.location.y*w);        drawLocation.sub(camera.anchor);        drawLocation.mult(camera.z);        drawLocation.sub(camera.location);        drawLocation.add(camera.anchor);                difference.sub(drawLocation);        difference.div(camera.z);                if (difference.mag() < (this.size*w)/2) {            this.focused = true;                        if (touches.length > 0) { //this will check mobile, too                hovering = true;                this.touched = true;            }            else {                this.touched = false;            }                        if (this.link == "/rate") {                numStars = parseInt(this.label.name);            }        }        else {            this.focused = false;            this.touched = false;        }                if (this.selected) {            camera.anchored = true;            camera.anchorTarget.set((this.anchor.x*width) + (this.location.x*w),(this.anchor.y*height) + (this.location.y*w));                        if (mobile && (this.link.length > SEAL_MAX || this.book !== null) && this.link.indexOf("/") == -1) { // slide the camera over so the bubble is in the corner of the view                var direction = new p5.Vector(this.location.x * w,this.location.y * w);                direction.normalize();                                var angle = direction.heading();                                if (angle < 0) {                    angle += 2*PI;                }                else if (angle > 2*PI) {                    angle -= 2*PI;                }                                if (angle > 0.5*PI && angle < 1.5*PI) {                    if (angle < PI) {                        camera.anchorTarget.add(-0.5*this.size*width,0.5*this.size*height);                    }                    else {                        camera.anchorTarget.add(-0.5*this.size*width,-0.5*this.size*height);                    }                }                else {                    if (angle > 1.5*PI) {                        camera.anchorTarget.add(0.5*this.size*width,-0.5*this.size*height);                    }                    else {                        camera.anchorTarget.add(0.5*this.size*width,0.5*this.size*height);                    }                }            }        }    }        this.select = function() { //update this.selected based on: difference.mag(), this.selected, this.selectOrigin, branches.selectOrigin, this.link; re-zoom camera; perform bubble-specific tasks;        var selectOrigin = false;        var difference = new p5.Vector(mouseX,mouseY);                var drawLocation = new p5.Vector(this.anchor.x * width,this.anchor.y * height);        drawLocation.add(this.location.x*w,this.location.y*w);        drawLocation.sub(camera.anchor);        drawLocation.mult(camera.z);        drawLocation.sub(camera.location);        drawLocation.add(camera.anchor);                difference.sub(drawLocation);        difference.div(camera.z);                if (difference.mag() < this.size*w*0.5 || searchTerms.length > 0) { //searchTerms.length is greater than 0 for home.bubbles[0] (search)            if (this.selected) {                if (searchTerms.length > 0) {                    if (mobile) {                        camera.zTarget = 1/map(this.size,0,0.5,0,1/MOBILE_ZOOM);                    }                    else {                        camera.zTarget = 1/map(this.size,0,0.5,0,1);                    }                }                                if (this.link.length > 0) {                    if (this.link.indexOf("http") > -1) {                        this.redirect();                    }                    else if (this.link === "/search") {                        //input search                                                var userInput;                                                if (searchTerms.length > 0) {                            userInput = searchTerms;                        }                        else {                            userInput = prompt("Input terms for a game's title or tags.");                        }                                                if (userInput != null && userInput.length > 0) {                            searchTerms = "";                                                        userInput = userInput.toLowerCase();                            userInput = (userInput.match(/[0-9a-z ]/g)).join(""); //remove punctuation and symbols (EX: "owen's fav'rite (3d) game!" --> "owens favrite 3d game")                                                        home.bubbles[0].branches = 0;                            home.bubbles[0].bubbles = [];                                                        searchedGames = [];                                                        this.loading = 0;                            var self = this;  //$.ajax()'s scope has its own "this" variable, so I made self refer to the bubble, while $.ajax().this refers to $, which is jquery                                                        //send ajax request                            $.ajax({                                   url: HOST_NAME + this.link,                                   type: "GET",                                   dataType: "json",                                   data: {terms: userInput.split(" ")},                                   success: function (incoming) {                                        if (incoming.message == "ERROR:read") {                                            alert("ERROR: some of the game icons were missing.");                                        }                                                                           //search by name                                        if (incoming.name.length > 0) {                                            home.bubbles[0].branches++;                                                                               if (incoming.tags.length > 0) {                                                home.bubbles[0].branches++;                                            }                                                                               home.bubbles[0].addBranch(1,FAN,0.3,new Label(18,"name"),0,"");                                                                               home.bubbles[0].bubbles[0].branches = incoming.name.length;                                                                               for (var n=0; n<incoming.name.length; n++) {                                                if (incoming.name[n].icon.length > 0) {                                                    searchedGames.push(loadImage(incoming.name[n].icon));                                                    home.bubbles[0].bubbles[0].addBranch(1,FAN,0.3,new Label(searchedGames.length-1+15,incoming.name[n].name),4,incoming.name[n].url);                                                }                                                else {                                                    home.bubbles[0].bubbles[0].addBranch(1,FAN,0.3,new Label(-1,incoming.name[n].name),4,incoming.name[n].url);                                                }                                                                                   home.bubbles[0].bubbles[0].bubbles[n].addBranch(1,FAN,0.3,new Label(12,"authors"),incoming.name[n].authors.length,"");                                                for (var i=0; i<incoming.name[n].authors.length; i++) {                                                    home.bubbles[0].bubbles[0].bubbles[n].bubbles[0].addBranch(1,FAN,0.3,new Label(-1,incoming.name[n].authors[i]),0,"");                                                }                                                home.bubbles[0].bubbles[0].bubbles[n].addBranch(1,FAN,0.3,new Label(14,"description"),0,incoming.name[n].description);                                                home.bubbles[0].bubbles[0].bubbles[n].addBranch(1,FAN,0.3,new Label(16,"tags"),incoming.name[n].tags.length,"");                                                for (var i=0; i<incoming.name[n].tags.length; i++) {                                                    home.bubbles[0].bubbles[0].bubbles[n].bubbles[2].addBranch(1,FAN,0.3,new Label(-1,incoming.name[n].tags[i]),0,"/newSearch");                                                }                                                home.bubbles[0].bubbles[0].bubbles[n].addBranch(1,FAN,0.3,new Label(4,"rating"),5,(Math.round(incoming.name[n].rating*10)/10).toString());                                                for (var i=1; i<=5; i++) {                                                    home.bubbles[0].bubbles[0].bubbles[n].bubbles[3].addBranch(1,FAN,0.3,new Label(4,i.toString()),0,"/rate");                                                }                                            }                                        }                                                                           //search by tags                                        if (incoming.tags.length > 0) {                                            if (incoming.name.length == 0) {                                                home.bubbles[0].branches++;                                            }                                                                               home.bubbles[0].addBranch(1,FAN,0.3,new Label(16,"tags"),0,"");                                                                               home.bubbles[0].bubbles[home.bubbles[0].branches-1].branches = incoming.tags.length;                                                                               for (var t=0; t<incoming.tags.length; t++) {                                                if (incoming.tags[t].icon.length > 0) {                                                    searchedGames.push(loadImage(incoming.tags[t].icon));                                                    home.bubbles[0].bubbles[home.bubbles[0].branches-1].addBranch(1,FAN,0.3,new Label(searchedGames.length-1+15,incoming.tags[t].name),4,incoming.tags[t].url);                                                }                                                else {                                                    home.bubbles[0].bubbles[home.bubbles[0].branches-1].addBranch(1,FAN,0.3,new Label(-1,incoming.tags[t].name),4,incoming.tags[t].url);                                                }                                                                                   home.bubbles[0].bubbles[home.bubbles[0].branches-1].bubbles[t].addBranch(1,FAN,0.3,new Label(12,"authors"),incoming.tags[t].authors.length,"");                                                for (var i=0; i<incoming.tags[t].authors.length; i++) {                                                    home.bubbles[0].bubbles[home.bubbles[0].branches-1].bubbles[t].bubbles[0].addBranch(1,FAN,0.3,new Label(-1,incoming.tags[t].authors[i]),0,"");                                                }                                                home.bubbles[0].bubbles[home.bubbles[0].branches-1].bubbles[t].addBranch(1,FAN,0.3,new Label(14,"description"),0,incoming.tags[t].description);                                                home.bubbles[0].bubbles[home.bubbles[0].branches-1].bubbles[t].addBranch(1,FAN,0.3,new Label(16,"tags"),incoming.tags[t].tags.length,"");                                                for (var i=0; i<incoming.tags[t].tags.length; i++) {                                                    home.bubbles[0].bubbles[home.bubbles[0].branches-1].bubbles[t].bubbles[2].addBranch(1,FAN,0.3,new Label(-1,incoming.tags[t].tags[i]),0,"/newSearch");                                                }                                                home.bubbles[0].bubbles[home.bubbles[0].branches-1].bubbles[t].addBranch(1,FAN,0.3,new Label(4,"rating"),5,(Math.round(incoming.tags[t].rating*10)/10).toString());                                                for (var i=1; i<=5; i++) {                                                    home.bubbles[0].bubbles[home.bubbles[0].branches-1].bubbles[t].bubbles[3].addBranch(1,FAN,0.3,new Label(4,i.toString()),0,"/rate");                                                }                                            }                                        }                                                                           self.loading = -1;                                   },                                   error: function (request,status,error) {                                       alert("A(n) " + status + " occurred when trying to retrieve games from the server.");                                       self.loading = -1;                                   }                            });                        }                    }                    else if (this.link == "/register" || this.link == "/login") {                        if (account.address == "") {                            var inputAddress;                            var inputPassword;                                                        if (this.link == "/register") {                                inputAddress = prompt("Type your EMAIL ADDRESS. Hubble will use this as your username and to send you an email with your account information.");                                                                if (inputAddress != null && inputAddress.length > 0) {                                    inputPassword = prompt("OK, now type an account PASSWORD (spaces not allowed).");                                                                        if (inputPassword != null && inputPassword.length > 0 && inputPassword.indexOf(" ") == -1) {                                        this.loading = 0;                                        var self = this;                                                                                $.ajax({                                               url: HOST_NAME + this.link,                                               type: "GET",                                               dataType: "json",                                               data: {                                                   account: {                                                       address: inputAddress,                                                       password: inputPassword                                                   }                                               },                                               success: function(incoming) {                                                   if (incoming.message.indexOf("ERROR:") > -1) {                                                       if (incoming.message.indexOf("many") > -1) {                                                           alert("That email is already registered with hubble.");                                                       }                                                       else if (incoming.message.indexOf("email") > -1) {                                                           alert("Sorry, hubble wasn't able to send a message to " + inputAddress + ". Are you sure you typed it correctly?");                                                       }                                                       else if (incoming.message.indexOf("write") > -1) {                                                           alert("Hmm... your email and password are valid, but the server had trouble updating its accounts data. Try again later, maybe.");                                                       }                                                   }                                                   else {                                                       alert("Registration successful. Try logging in!");                                                   }                                                                                                      self.loading = -1;                                               },                                               error: function (request,status,error) {                                                   alert("A(n) " + status + " occurred when trying to register a new account.");                                                   self.loading = -1;                                               }                                               });                                    }                                    else if (inputPassword.indexOf(" ") > -1) {                                        alert("I could not register you because " + inputPassword + " has spaces in it.");                                    }                                }                            }                            else {                                inputAddress = prompt("Type the EMAIL ADDRESS that you registered with hubble. If you don't remember which it is, hubble sent you an email to that address when you registered.");                                                                if (inputAddress != null && inputAddress.length > 0) {                                    inputPassword = prompt("Type your PASSWORD.");                                                                        if (inputPassword != null && inputPassword.length > 0) {                                        this.loading = 0;                                        var self = this;                                                                                $.ajax({                                               url: HOST_NAME + this.link,                                               type: "GET",                                               dataType: "json",                                               data: {                                                   account: {                                                       address: inputAddress,                                                       password: inputPassword                                                   }                                               },                                               success: function(incoming) {                                                   if (incoming.message.indexOf("ERROR:") > -1) {                                                       if (incoming.message.indexOf("gone") > -1) {                                                           alert(inputAddress + " is not registered with hubble... typo, maybe?");                                                       }                                                       else if (incoming.message.indexOf("code") > -1) {                                                           alert("The password you gave doesn't match the one on file. Check your email for a message from hubble if you forgot what your password is.");                                                       }                                                   }                                                   else {                                                       account.address = inputAddress;                                                       account.reviews = incoming.reviews;                                                       account.curator = incoming.curator;                                                       if (account.curator == null) {                                                           account.curator = false;                                                       }                                                       account.bday = incoming.bday;                                                                                                      var now = new Date();                                                       account.age = {                                                           years: now.getFullYear() - account.bday.year,                                                           months: (now.getMonth()+1) - account.bday.month,                                                           days: now.getDate() - account.bday.day,                                                       };                                                                                                      if (account.age.days < 0) {                                                           account.age.months--;                                                           account.age.days = 30+account.age.days;                                                       }                                                       if (account.age.months < 0) {                                                           account.age.years--;                                                           account.age.months = 12+account.age.months;                                                       }                                                                                                      // add the account info bubble to the account bubble                                                                                                      home.bubbles[3].bubbles = [];                                                       home.bubbles[3].branches = 4;                                                                                                      home.bubbles[3].addBranch(1,FAN,0.3,new Label(24,"login"),0,"/login");                                                       home.bubbles[3].addBranch(1,FAN,0.3,new Label(22,"register"),0,"/register");                                                       home.bubbles[3].addBranch(1,FAN,0.3,new Label(8,"info"),0,"Address: " + account.address + PAGE_BREAK + "Username: " + account.address.substring(0,account.address.indexOf("@")) + PAGE_BREAK + "Register date: " + account.bday.month + "-" + account.bday.day + "-" + account.bday.year + PAGE_BREAK + "Approximate Age: " + account.age.years + " years " + account.age.months + " months " + account.age.days + " days" + PAGE_BREAK + "Curator: ");                                                                                                      if (account.curator) {                                                           home.bubbles[3].bubbles[2].link += "YES";                                                       }                                                       else {                                                           home.bubbles[3].bubbles[2].link += "NO";                                                       }                                                       home.bubbles[3].bubbles[2].link += PAGE_BREAK + "Reviews: ";                                                                                                      if (account.reviews.length == 0) {                                                            home.bubbles[3].bubbles[2].link += "none";                                                       }                                                       else {                                                           for (var i=0; i<account.reviews.length; i++) {                                                               home.bubbles[3].bubbles[2].link += "(" + account.reviews[i].game + "," + account.reviews[i].rating + ") ";                                                           }                                                       }                                                                                                      home.bubbles[3].bubbles[2].checkBook();                                                                                                      if (incoming.message.indexOf("admin") == -1) {                                                           home.bubbles[3].addBranch(1,FAN,0.3,new Label(12,"curate"),0,"/curate");                                                       }                                                       else {                                                           home.bubbles[3].label.name = "admin";                                                           home.bubbles[3].addBranch(1,FAN,0.3,new Label(12,"edit"),2,"/edit");                                                               home.bubbles[3].bubbles[3].addBranch(1,FAN,0.3,new Label(22,"accounts"),0,"/accounts");                                                               home.bubbles[3].bubbles[3].addBranch(1,FAN,0.3,new Label(6,"games"),2,"");                                                                   home.bubbles[3].bubbles[3].bubbles[1].addBranch(1,FAN,0.3,new Label(28,"append"),0,"/games_append");                                                                   home.bubbles[3].bubbles[3].bubbles[1].addBranch(1,FAN,0.3,new Label(12,"replace"),0,"/games_replace");                                                       }                                                                                                      home.bubbles[3].selected = true;                                                       if (mobile) {                                                           camera.zTarget = 1/map(home.bubbles[3].size,0,0.5,0,1/MOBILE_ZOOM);                                                       }                                                       else {                                                           camera.zTarget = 1/map(home.bubbles[3].size,0,0.5,0,1);                                                       }                                                                                                      alert("Login successful. You are now recognized as " + account.address.substring(0,account.address.indexOf("@")) + ". You have reviewed " + account.reviews.length + " games.");                                                   }                                                                                                      self.loading = -1;                                               },                                               error: function (request,status,error) {                                                   alert("A(n) " + status + " occurred when trying to sign in with an existing account.");                                                   self.loading = -1;                                               }                                        });                                    }                                }                            }                        }                        else {                            alert("You're already signed in under the following address: " + account.address);                        }                    }                    else if (this.link == "/curate") {                        var self = this;                                                if (account.curator) {                            var newGame = {                                url: null,                                name: null,                                description: null,                                authors: null,                                rating: "0",                                tags: null,                            }                                                        newGame.url = prompt("Type the URL to the game's webpage.","http://");                                                        if (newGame.url != null && newGame.url.length > 0) {                                newGame.name = prompt("Now type the name of the game (Only letters, numbers and spaces. Example: Exemplary Game 2).");                                                                if (newGame.name != null && newGame.name.length > 0) {                                    newGame.description = prompt("Give a brief description of the game: a general idea, instruction on gameplay, etc.");                                                                        if (newGame.description != null && newGame.description.length > 0) {                                        var characters = 0; //page length counter                                        for (var i=0; i<newGame.description.length; i++) {                                            characters++;                                                                                        if (characters >= PAGE_LENGTH) {                                                i = newGame.description.lastIndexOf(" ",i);                                                                                                newGame.description = newGame.description.substring(0,i) + PAGE_BREAK + newGame.description.substring(i+1);                                                i += PAGE_BREAK.length;                                                characters = 0;                                            }                                        }                                                                                newGame.authors = prompt("List the authors of the game. They can be individuals and/or companies (Example:An Author,Some Company). If you can't find them, you can leave this one blank.");                                                                                if (newGame.authors != null) {                                            if (newGame.authors.length = 0) {                                                newGame.authors = [];                                            }                                            else {                                                newGame.authors = newGame.authors.split(",");                                            }                                                                                        while (newGame.rating != null && !(newGame.rating == "1" || newGame.rating == "2" || newGame.rating == "3" || newGame.rating == "4" || newGame.rating == "5")) {                                                newGame.rating = prompt("Type a number to give the game your initial rating (1 is worst, 5 is best).");                                            }                                                                                        if (newGame.rating != null) {                                                newGame.rating = parseInt(newGame.rating);                                                                                                newGame.tags = prompt("Finally, list some one-word tags to describe the game. Given are a few general suggested options, but add and subtract you see fit.","action,strategy,multiplayer,singleplayer,adventure,puzzle,racing,arcade,simple,complex,shooting,infinite,mobile,turnbased,survival,...").toLowerCase();                                                                                                if (newGame.tags != null && newGame.tags.length > 0) {                                                    newGame.tags = newGame.tags.match(/[0-9a-z,]/g).join("").split(",");                                                                                                        self.loading = 0;                                                                                                        $.ajax({                                                           url: HOST_NAME + this.link,                                                           type: "GET",                                                           dataType: "json",                                                           data: {                                                               curator: account.address,                                                               game: newGame                                                           },                                                           success: function (incoming) {                                                               if (incoming.message.indexOf("ERROR:") > -1) {                                                                   if (incoming.message.indexOf("gone") > -1) {                                                                       alert("Sorry, but the server could not find your account on file when trying to authenticate you...");                                                                   }                                                                   else if (incoming.message.indexOf("write") > -1) {                                                                       alert("An error ocurred when the server tried to store your game submission...");                                                                   }                                                                   else if (incoming.message.indexOf("curator") > -1) {                                                                       alert("Sorry, but your application for curator hasn't been processed yet. Please try again later.");                                                                   }                                                               }                                                               else {                                                                   alert("Submission for " + newGame.name + " successful. Thanks for helping improve hubble's collection! An email will be sent to you when we add the game to the site.");                                                               }                                                                                                                          self.loading = -1;                                                           },                                                           error: function (request,status,error) {                                                               alert("A(n) " + status + " occurred when trying to add " + newGame.name + ".");                                                               self.loading = -1;                                                           }                                                    });                                                }                                            }                                        }                                    }                                }                            }                        }                        else {                            this.loading = 0;                                                        $.ajax({                                   url: HOST_NAME + this.link,                                   type: "GET",                                   dataType: "json",                                   data: {                                       curator: account.address,                                   },                                   success: function (incoming) {                                       if (incoming.message.indexOf("ERROR:") > -1) {                                           if (incoming.message.indexOf("gone") > -1) {                                                alert("Sorry, but the server could not find your account on file when trying to authenticate you...");                                           }                                           else if (incoming.message.indexOf("write") > -1) {                                               alert("An error ocurred when the server tried to store your request...");                                           }                                           else if (incoming.message.indexOf("curator") > -1) {                                               alert("Apparently you've already requested curator status.");                                           }                                           else if (incoming.message.indexOf("email") > -1) {                                               alert("We had trouble notifying the admin of your curator application via email. Try again?");                                           }                                       }                                       else {                                           alert("Your request has been sent! An email will be sent shortly with our response.");                                       }                                                                          self.loading = -1;                                   },                                   error: function (request,status,error) {                                       alert("A(n) " + status + " occurred when trying to request curator status from the server.");                                       self.loading = -1;                                   }                            });                        }                    }                    else if (this.link == "/accounts") {                        this.loading = 0;                        var self = this;                                                $.ajax({                               url: HOST_NAME + this.link,                               type: "GET",                               dataType: "json",                               success: function(incoming) {                                   var edit = prompt("Editing accounts.json",JSON.stringify(incoming.file));                                                                      if (edit != null) {                                       $.ajax({                                              url: HOST_NAME + "/accounts_new",                                              contentType: "application/json",                                              type: "POST",                                              dataType: "json",                                              data: JSON.stringify({file: edit}),                                              success: function(incoming) {                                                  if (incoming.message == "ERROR:write") {                                                      alert("The server failed to overwrite accounts.json :(");                                                  }                                                  else {                                                      alert("Edit to accounts.json successful! Remember to notify those promoted to curator status.");                                                  }                                                                                                self.loading = -1;                                              },                                              error: function(request,status,error) {                                                  alert("A(n) " + status + " occurred when sending the new file to the server.");                                                  self.loading = -1;                                              }});                                   }                                   else {                                       self.loading = -1;                                   }                               },                               error: function(request,status,error) {                                   alert("A(n) " + status + " occurred when reading the old accounts data from the server.");                                   self.loading = -1;                               }                               });                    }                    else if (this.link == "/games_append") {                        this.loading = 0;                        var self = this;                                                $.ajax({                               url: HOST_NAME + this.link,                               type: "GET",                               dataType: "json",                               success: function(incoming) {                                    var submissions = incoming.file;                                                                   self.branches = submissions.length; //prune bubble tree at the games.append bubble                                    self.bubbles = [];                                                                   if (submissions.length > 0) {                                        for (var i=0; i<submissions.length; i++) {                                            self.addBranch(1,FAN,0.3,new Label(28,submissions[i].game.name),7,"/games_append_new");                                                                                   self.bubbles[i].addBranch(1,FAN,0.3,new Label(2,"url"),0,submissions[i].game.url);                                                self.bubbles[i].addBranch(1,FAN,0.3,new Label(18,"curator"),0,submissions[i].curator);                                                self.bubbles[i].addBranch(1,FAN,0.3,new Label(12,"authors"),0,submissions[i].game.authors.join(","));                                                self.bubbles[i].addBranch(1,FAN,0.3,new Label(14,"description"),0,submissions[i].game.description);                                                self.bubbles[i].addBranch(1,FAN,0.3,new Label(16,"tags"),0,submissions[i].game.tags.join(","));                                                self.bubbles[i].addBranch(1,FAN,0.3,new Label(4,"rating"),0,(Math.round(submissions[i].game.rating*10)/10).toString());                                                self.bubbles[i].addBranch(1,FAN,0.3,new Label(-1,"icon"),0,"/games_append_new_icon");                                                                               self.bubbles[i].bubbles[3].checkBook();                                        }                                    }                                    var fileUpload = document.createElement("input");                                    fileUpload.setAttribute("id","file_upload");                                    fileUpload.setAttribute("type","file");                                    fileUpload.setAttribute("style","display:none");                                                                   fileUpload.onchange = function() {                                        uploadFile(this.files[0]);                                    }                                                                   document.body.appendChild(fileUpload);                                                                   self.loading = -1;                               },                               error: function(request,status,error) {                                   alert("A(n) " + status + " occurred when retrieving the submissions data from the server :(");                                   self.loading = -1;                               }                               });                    }                    else if (this.link == "/games_append_new") {                        this.loading = 0;                        var self = this;                                                var submission = {                            curator: this.bubbles[1].link,                            game: {                                url: this.bubbles[0].link,                                name: this.label.name,                                authors: this.bubbles[2].link.split(","),                                description: this.bubbles[3].link,                                tags: this.bubbles[4].link.split(","),                                rating: parseInt(this.bubbles[5].link),                                icon: null                            }                        }                                                if (imageUpload) {                            submission.game.icon = imageUpload.canvas.toDataURL();                        }                        if (this.bubbles[3].book !== null) {                            submission.game.description = this.bubbles[3].book.pages.join("");                        }                                                if (submission != null) {                            $.ajax({                                   url: HOST_NAME + "/games_append_new",                                   type: "POST",                                   contentType: "application/json",                                   dataType: "json",                                   data: JSON.stringify(submission),                                   success: function(incoming) {                                       if (incoming.message == "ERROR:write") {                                           alert("The server failed to overwrite games.json :(");                                       }                                       else if (incoming.message == "ERROR:add") {                                           alert("The server failed to add the new game :(");                                       }                                       else if (incoming.message == "ERROR:erase") {                                           alert("The server couldn't find and delete the old submission :(");                                       }                                       else if (incoming.message == "ERROR:email") {                                           alert("The server failed to send a message to " + submission.curator + ", so don't forget to write that email.");                                       }                                       else if (incoming.message == "ERROR:icon") {                                           alert("The server couldn't create the game's icon; addition aborted :(");                                       }                                       else if (incoming.message == "SUCCESS") {                                           alert("The new game was successfully added to hubble!");                                       }                                                                          self.loading = -1;                                   },                                   error: function(request,status,error) {                                       alert("A(n)" + status + "ocurred when sending the new addition to the server.");                                       self.loading = -1;                                   }                                   });                        }                    }                    else if (this.link.indexOf("/games_append_new_icon") > -1) {                        document.getElementById("file_upload").click();                    }                    else if (this.link == "/games_replace") {                        this.loading = 0;                        var self = this;                                                $.ajax({                               url: HOST_NAME + this.link,                               type: "GET",                               dataType: "json",                               success: function(incoming) {                                   var edit = prompt("Editing games.json",JSON.stringify(incoming.file));                                                                      if (edit != null) {                                       $.ajax({                                              url: HOST_NAME + "/games_replace_new",                                              type: "POST",                                              contentType: "application/json",                                              dataType: "json",                                              data: JSON.stringify({file: edit}),                                              success: function(incoming) {                                                  if (incoming.message == "ERROR:write") {                                                      alert("The server failed to overwrite games.json :(");                                                  }                                                  else if (incoming.message == "SUCCESS") {                                                      alert("games.json was successfully replaced with the edited version!");                                                  }                                                  self.loading = -1;                                              },                                              error: function(request,status,error) {                                                  alert("A(n) " + status + " occurred when sending the new file to the server.");                                                  self.loading = -1;                                              }});                                   }                                   else {                                       self.loading = -1;                                   }                               },                               error: function(request,status,error) {                                   alert("A(n) " + status + " occurred when reading the old games data from the server.");                                   self.loading = -1;                               }                               });                    }                    else if (this.link == "/random") {                        this.loading = 0;                        var self = this;                                                $.ajax({                               url: HOST_NAME + this.link,                               type: "GET",                               dataType: "json",                               success: function(incoming) {                               if (incoming.message == "ERROR:read") {                                   alert("An error occured when the server tried to pull from the games data file :/");                                   self.loading = -1;                               }                               else {                                   randomGames = [];                                   self.bubbles = [];                                   self.branches = incoming.games.length;                                                                      for(var i=0; i<incoming.games.length; i++) {                                       if (incoming.games[i].icon.length > 0) {                                           randomGames.push(loadImage(incoming.games[i].icon));                                           self.addBranch(1,FAN,0.3,new Label(randomGames.length-1+10,incoming.games[i].name),4,incoming.games[i].url);                                       }                                       else {                                           self.addBranch(1,FAN,0.3,new Label(-1,incoming.games[i].name),4,incoming.games[i].url);                                       }                                                                              self.bubbles[i].addBranch(1,FAN,0.3,new Label(12,"authors"),incoming.games[i].authors.length,"");                                       for (var j=0; j<incoming.games[i].authors.length; j++) {                                           self.bubbles[i].bubbles[0].addBranch(1,FAN,0.3,new Label(-1,incoming.games[i].authors[j]),0,"");                                       }                                       self.bubbles[i].addBranch(1,FAN,0.3,new Label(14,"description"),0,incoming.games[i].description);                                       self.bubbles[i].addBranch(1,FAN,0.3,new Label(16,"tags"),incoming.games[i].tags.length,"");                                       for (var j=0; j<incoming.games[i].tags.length; j++) {                                           self.bubbles[i].bubbles[2].addBranch(1,FAN,0.3,new Label(-1,incoming.games[i].tags[j]),0,"/newSearch");                                       }                                       self.bubbles[i].addBranch(1,FAN,0.3,new Label(4,"rating"),5,(Math.round(incoming.games[i].rating*10)/10).toString());                                       for (var j=1; j<=5; j++) {                                           self.bubbles[i].bubbles[3].addBranch(1,FAN,0.3,new Label(4,j.toString()),0,"/rate");                                       }                                   }                               }                                                                  self.loading = -1;                               },                               error: function(request,status,error) {                                   alert("A(n) " + status + " occurred when reading the data from the server.");                                   self.loading = -1;                               }                        });                    }//                    else if (this.link == "/submissions") {//                        this.loading = 0;//                        var self = this;//                        //                        $.ajax({//                               url: HOST_NAME + this.link,//                               type: "GET",//                               dataType: "json",//                               success: function(incoming) {//                               //                               },//                               error: function(request,status,error) {//                                   alert("A(n) " + status + " occurred when sending the new submissions data to the server.");//                                   self.loading = -1;//                               }//                               });//                    }                }                else if (this.book !== null) {                    this.book.bookmark++;                                        if (this.book.bookmark > this.book.pages.length-1) {                        this.book.bookmark = 0;                    }                }            }            else if (this.extension > 0.1 || this.location.equals(0,0)) {                if (UPPER_CASE_REGEX.test(this.label.name)) { //guarantee that the bubble represents a game                    var accountRating = -1; //account.reviews[g].rating by parentGame if (parentGame.selected && account.reviews[g].game == parentGame.label.name > -1)                                        for (var i=0; i<account.reviews.length && accountRating == -1; i++) {                        if (account.reviews[i].game == this.label.name) {                            accountRating = account.reviews[i].rating;                        }                    }                                        if (accountRating > -1) { //this.bubbles[3=rating].bubbles[all].parentGameRating = accountRating (used for #bubble highlighting)                        home.resetParentGameRating();                                                for (var i=0; i<this.bubbles[3].bubbles.length; i++) {                            this.bubbles[3].bubbles[i].parentGameRating = accountRating;                        }                    }                                        currentGame = this; //point currentGame to whatever game bubble was most recently selected                }                                if (this.link == "/rate") {                    if (account.address.length > 0) {                        var newRating = this.label.name;                                                var foundGame = false;                        for (var i=0; i<account.reviews.length && !foundGame; i++) {                            if (account.reviews[i].game == currentGame.label.name) {                                foundGame = true;                                newRating -= account.reviews[i].rating;                            }                        }                                                this.loading = 0;                        var self = this;                                                $.ajax({                               url: HOST_NAME + this.link,                               type: "GET",                               dataType: "json",                               data: {                                    account: {                                        address: account.address,                                        reviewed: foundGame                                    },                                    rating: newRating,                                    game: currentGame.label.name                               },                               success: function(incoming) {                                    if (incoming.message.indexOf("ERROR:") > -1) {                                        if (incoming.message.indexOf("gone") > -1) {                                           alert("Sorry, but the server could not find your account on file when changing your review data...");                                        }                                        else if (incoming.message.indexOf("write") > -1) {                                           alert("An error occured: the server couldn't update the game's rating...");                                        }                                        else if (incoming.message.indexOf("reviewed") > -1) {                                            alert("The server couldn't find a record of your original review for " + currentGame.label.name);                                        }                                        else {                                            alert("An unknown error occured. :|");                                        }                                    }                                    else if (incoming.message.indexOf("SUCCESS") > -1) {                                        alert("Success! You have now rated " + incoming.reviews.length + " game(s). Your rating for " + currentGame.label.name + " is " + incoming.rating + ".");                                        account.reviews = incoming.reviews;                                    }                                                                  self.loading = -1;                               },                               error: function (request,status,error) {                                   alert("A(n) " + status + " occurred when trying to rate a game.");                                   self.loading = -1;                               }                        });                    }                    else {                        alert("You are not signed in with an account at the moment. Please do so (register and log in or just log in if you have an account) at the account bubble.");                    }                                        this.selected = false;                    selectOrigin = true;                }                else {                    this.selected = true;                                        if (mobile) {                        camera.zTarget = 1/map(this.size,0,0.5,0,1/MOBILE_ZOOM);                    }                    else {                        camera.zTarget = 1/map(this.size,0,0.5,0,1);                    }                }                                if (this.link.length > 0) {                    if (this.link == "/featured" && featuredGames.length == 0) {                        //$ refers to the jquery library                        //ajax() sends an http message to the url, in this case to get an array of featured games stored on the server.                                                this.loading = 0;                                                var self = this;                                                $.ajax({                               url: HOST_NAME + this.link,                               type: "GET",                               dataType: "json",                               success: function(incoming) {                                   if (incoming.message == "ERROR:read") {                                       alert("ERROR: some of the game icons were missing.");                                   }                                                                  home.bubbles[1].branches = incoming.games.length;                                                                  for (var i=0; i<incoming.games.length; i++) {                                       if (incoming.games[i].icon.length > 0) {                                           featuredGames.push(loadImage(incoming.games[i].icon));                                           home.bubbles[1].addBranch(1,FAN,0.3,new Label(i, incoming.games[i].name),4,incoming.games[i].url);                                       }                                       else {                                           home.bubbles[1].addBranch(1,FAN,0.3,new Label(-1, incoming.games[i].name),4,incoming.games[i].url);                                       }                                                                                                      home.bubbles[1].bubbles[i].addBranch(1,FAN,0.3,new Label(12,"authors"),incoming.games[i].authors.length,"");                                        for (var a=0; a<incoming.games[i].authors.length; a++) {                                            home.bubbles[1].bubbles[i].bubbles[0].addBranch(1,FAN,0.3,new Label(-1,incoming.games[i].authors[a]),0,"");                                        }                                        home.bubbles[1].bubbles[i].addBranch(1,FAN,0.3,new Label(14,"description"),0,incoming.games[i].description);                                        home.bubbles[1].bubbles[i].addBranch(1,FAN,0.3,new Label(16,"tags"),incoming.games[i].tags.length,"");                                        for (var t=0; t<incoming.games[i].tags.length; t++) {                                            home.bubbles[1].bubbles[i].bubbles[2].addBranch(1,FAN,0.3,new Label(-1,incoming.games[i].tags[t]),0,"/newSearch");                                        }                                        home.bubbles[1].bubbles[i].addBranch(1,FAN,0.3,new Label(4,"rating"),5,(Math.round(incoming.games[i].rating*10)/10).toString());                                        for (var j=1; j<=5; j++) {                                            home.bubbles[1].bubbles[i].bubbles[3].addBranch(1,FAN,0.3,new Label(4,j.toString()),0,"/rate");                                        }                                   }                                                                  self.loading = -1;                               },                               error: function (request,status,error) {                                   alert("A(n) " + status + " occurred when loading retrieving featured games from the server.");                                   self.loading = -1;                               }                               });                    }                    else if (this.link == "/newSearch") {                        searchTerms = this.label.name;                                                this.selected = false;                        home.bubbles[0].selected = true;                        home.bubbles[0].select();                    }                }            }        }        else if (this.selected) {            this.selected = false;                        if (mobile) {                selectOrigin = true;                                if (this.location.equals(0,0)) {                    camera.anchored = false;                }            }            else {                camera.anchored = false;            }        }                for (var i=0; i<this.bubbles.length; i++) {            if (this.bubbles[i].select() && !this.selected) {                this.selected = true;                                if (mobile) {                    camera.zTarget = 1/map(this.size,0,0.5,0,1/MOBILE_ZOOM);                }                else {                    camera.zTarget = 1/map(this.size,0,0.5,0,1);                }            }            if (this.bubbles[i].selected) {                selectOrigin = false;            }        }                if (this.selected || home.bubbles[0].selected) { //the second expression is needed because if categories.bubble is clicked, search is selected, but categories.select() also returns true.            selectOrigin = false;        }                return selectOrigin;    }        this.originate = function() { //update this.bubbles.origin, then update this.origin        this.origin = false;                for (var i=0; i<this.bubbles.length && !this.origin; i++) {            this.bubbles[i].originate();                        if (this.bubbles[i].selected || this.bubbles[i].origin) {                this.origin = true;            }        }        for (var i=0; i<this.bubbles.length && !this.origin; i++) {            if (this.bubbles[i].selected || this.bubbles[i].origin) {                this.origin = true;            }        }    }        this.extendBranches = function() { //update this.extension and this.bubbles.extension based on this.selected and this.origin        if (this.origin || this.selected) {            for (var i=0; i<this.bubbles.length; i++) {                this.bubbles[i].extension += (1.00 - this.bubbles[i].extension) * 0.1;            }        }        else {            for (var i=0; i<this.bubbles.length; i++) {                this.bubbles[i].extension *= 0.9;            }        }    }        this.redirect = function() { //tell browser to find the game's website        if (this.link.length > 0) {            window.location.assign(this.link);        }    }        this.updateAnchor = function() { //update branches.anchor        for (var i=0; i<this.branches; i++) {            this.bubbles[i].anchor.set(((this.anchor.x*width) + (this.location.x * w * this.extension)) / width,((this.anchor.y*height) + (this.location.y * w * this.extension)) / height);        }    }        this.resetParentGameRating = function() { //# star bubbles for rating highlight if their game has been rated. parentGameRating = -1 for all before a new game is found to be rated already        this.parentGameRating = -1;                for (var i=0; i<this.bubbles.length; i++) {            this.bubbles[i].resetParentGameRating();        }    }        this.checkLoading = function() { //check if any branches are loading        var isLoading = false;                if (!this.selected && !this.origin) {            for (var i=0; i<this.bubbles.length && !isLoading; i++) {                if (this.bubbles[i].loading >= 0 || this.bubbles[i].checkLoading()) {                    isLoading = true;                }            }                        if (isLoading) {                this.loading = PI*4;            }            else {                this.loading = -1;            }        }                return isLoading;    }        this.display = function() { //display bubble and lines colored according to this.selected and this.origin        for (var i=0; i<this.bubbles.length; i++) {            this.bubbles[i].display();        }                if (this.extension > 0.01 || this.location.equals(0,0)) {            var drawAnchor = new p5.Vector(this.anchor.x * width,this.anchor.y * height);            drawAnchor.sub(camera.anchor);            drawAnchor.mult(camera.z);            drawAnchor.sub(camera.location);            drawAnchor.add(camera.anchor);                        var drawLocation = new p5.Vector(this.anchor.x * width,this.anchor.y * height);            drawLocation.add(this.location.x * w * this.extension,this.location.y * w * this.extension);            drawLocation.sub(camera.anchor);            drawLocation.mult(camera.z);            drawLocation.sub(camera.location);            drawLocation.add(camera.anchor);                        var drawSize = this.size * w * camera.z;                        if (this.loading >= 0) {                if (this.loading < PI*2) {                    this.loading += PI*0.02;                }                else if (this.loading < PI*3) {                    this.loading = 0;                }                else { //bubble is loading only because child is loading                    if (this.selected || this.origin || !this.checkLoading()) {                        this.loading = -1;                    }                    else if (this.loading < PI*5) {                        this.loading += PI*0.02;                    }                    else {                        this.loading = PI*3;                    }                }                                drawSize += abs(sin(this.loading)) * (drawSize * 0.08);            }            else if (this.checkLoading()) {                this.loading = PI*3;            }                        push();                        if (drawLocation.x + (drawSize * 0.5) > 0 && drawLocation.y + (drawSize * 0.5) > 0 && drawLocation.x - (drawSize * 0.5) < width && drawLocation.y - (drawSize * 0.5) < height) {                noFill();                if (this.selected || this.origin) {                    if (hovering && !this.touched) {                        stroke(60);                    }                    else {                        stroke(255);                    }                }                else {                    stroke(0);                }                strokeWeight(2);                line(drawAnchor.x,drawAnchor.y,drawLocation.x,drawLocation.y);                                if (this.label != null) {                    if (this.label.name != null && (this.extension > 0.9 || this.location.equals(0,0))) {                        translate(drawLocation.x,drawLocation.y);                                                noStroke();                        if (hovering && !this.touched) {                            fill(60);                        }                        else {                            fill(255);                        }                                                textFont("Courier New");                        textAlign(CENTER);                                                var letter;                        var letterR;                        var letterAV;                        var letterA;                        var letterX;                        var letterY;                                                if (typeof this.link === "string") { //show seal                            if (this.link.length > 0 && this.link.length <= SEAL_MAX && this.link.indexOf("/") == -1) {                                if (mobile) {                                    textSize(2.5 * (constrain(drawSize,w*0.25,w) * 0.1));                                    if (this.touched) {                                        letterR = drawSize + (textSize()*0.8);                                    }                                    else {                                        letterR = (drawSize*0.5) + (textSize()*0.8);                                    }                                    letterAV = 0.5 * textSize() / letterR;                                }                                else {                                    textSize(drawSize * 0.1);                                    letterR = (drawSize * 0.5) + textSize();                                    letterAV = constrain((drawSize*0.01) * PI * 0.015,PI*0.04,PI*0.08);                                }                                                                letterA = (PI * 0.5) + (0.5 * letterAV * (this.link.length-1));                                                                for (var i=0; i<this.link.length; i++) {                                    letter = this.link.charAt(i);                                                                        letterX = letterR * cos(letterA - (i*letterAV));                                    letterY = letterR * sin(letterA - (i*letterAV));                                                                        translate(letterX,letterY);                                    rotate(letterA - (i*letterAV) + (PI * 1.5));                                                                        text(letter,0,0);                                                                        rotate(-1*(letterA - (i*letterAV) + (PI * 1.5)));                                    translate(-1*letterX,-1*letterY);                                }                            }                        }                                                if (this.focused) { //show name                            var nameText = "" + this.label.name;                                                        if (mobile) {                                textSize(2.5 * (constrain(drawSize,w*0.25,w) * 0.1));                            }                            else {                                textSize(drawSize*0.15);                            }                                                        letterR = (drawSize*0.5) + (textSize()*0.5);                            if (mobile) {                                if (this.touched) {                                    letterR = drawSize + (textSize()*0.2);                                }                                else {                                    letterR = (drawSize*0.5) + (textSize()*0.2);                                                                        var end = nameText.length-2;                                    while (0.5 * textSize() * nameText.length > NAME_MAX * letterR * 2 * PI) {                                        end--;                                        nameText = nameText.substring(0,end) + LINE_BREAK;                                    }                                }                            }                                                        letterAV = constrain((drawSize*0.01) * PI * 0.015,PI*0.04,PI*0.08);                            if (mobile) {                                letterAV = 0.5 * textSize() / letterR;                            }                                                        letterA = (PI * 1.5) - (0.5 * letterAV * (this.label.name.length-1));                                                        for (var i=0; i<nameText.length; i++) {                                letter = nameText.charAt(i);                                                                letterX = letterR * cos(letterA + (i*letterAV));                                letterY = letterR * sin(letterA + (i*letterAV));                                                                translate(letterX,letterY);                                rotate(letterA + (i*letterAV) - (PI * 1.5));                                                                text(letter,0,0);                                                                rotate(-1*(letterA + (i*letterAV) - (PI * 1.5)));                                translate(-1*letterX,-1*letterY);                            }                        }                        else if (this.label.image == -1) { //show name always if there's no image                            var nameText = "" + this.label.name;                                                        if (mobile) {                                textSize(2.5 * (constrain(drawSize,w*0.25,w) * 0.1));                                                                letterR = (drawSize*0.5) + (textSize()*0.2);                                                                var end = nameText.length-2;                                while (0.5 * textSize() * nameText.length > NAME_MAX * letterR * 2 * PI) {                                    end--;                                    nameText = nameText.substring(0,end) + LINE_BREAK;                                }                            }                            else {                                textSize(drawSize*0.15);                                                                letterR = (drawSize*0.5) + (textSize()*0.5);                            }                                                        text(this.label.name,0,-1*letterR);                        }                                                translate(-1*drawLocation.x,-1*drawLocation.y);                    }                                        if (this.label.image != -1 || this.link == "/games_append_new_icon") { //show icon                        imageMode(CENTER);                                                if (hovering && !this.touched && this.link !== "/rate") {                            tint(50);                        }                                                if (this.link != "/games_append_new_icon") {                            if (UPPER_CASE_REGEX.test(this.label.name) && this.link != "/games_append_new") { //show game icons                                if (this.label.image > 9) {                                    if (this.label.image < 15) {                                        image(randomGames[this.label.image-10],0,0,randomGames[this.label.image-10].width,randomGames[this.label.image-10].height,drawLocation.x,drawLocation.y,drawSize,drawSize);                                    }                                    else {                                        image(searchedGames[this.label.image-15],0,0,searchedGames[this.label.image-15].width,searchedGames[this.label.image-15].height,drawLocation.x,drawLocation.y,drawSize,drawSize);                                    }                                }                                else {                                    image(featuredGames[this.label.image],0,0,featuredGames[this.label.image].width,featuredGames[this.label.image].height,drawLocation.x,drawLocation.y,drawSize,drawSize);                                }                            }                            else { //show hubble icons                                if ((this.selected || this.origin || (this.link === "/rate" && (numStars >= this.label.name || this.focused || (numStars === 0 && this.parentGameRating >= parseFloat(this.label.name))))) && this.label.image % 2 == 0) {                                    image(images[this.label.image+1],0,0,images[this.label.image+1].width,images[this.label.image+1].height,drawLocation.x,drawLocation.y,drawSize,drawSize);                                }                                else {                                    image(images[this.label.image],0,0,images[this.label.image].width,images[this.label.image].height,drawLocation.x,drawLocation.y,drawSize,drawSize);                                }                            }                        }                        else if (imageUpload) { //show image upload                            image(imageUpload,0,0,imageUpload.width,imageUpload.height,drawLocation.x,drawLocation.y,drawSize,drawSize);                        }                        else {                            if (this.selected || this.origin) {                                if (hovering && !this.touched) {                                    fill(60);                                }                                else {                                    fill(255);                                }                            }                            else {                                fill(0);                            }                            noStroke();                            ellipse(drawLocation.x,drawLocation.y,drawSize,drawSize);                        }                    }                    else {                        if (this.selected || this.origin) {                            if (hovering && !this.touched) {                                fill(60);                            }                            else {                                fill(255);                            }                        }                        else {                            fill(0);                        }                        noStroke();                        ellipse(drawLocation.x,drawLocation.y,drawSize,drawSize);                    }                }                else {                    if (this.selected || this.origin) {                        if (hovering && !this.touched) {                            fill(60);                        }                        else {                            fill(255);                        }                    }                    else {                        fill(0);                    }                    noStroke();                    ellipse(drawLocation.x,drawLocation.y,drawSize,drawSize);                }            }                        pop();        }    }        this.displayText = function() { //show dialogueBox        for (var i=0; i<this.bubbles.length; i++) {            this.bubbles[i].displayText();        }                if (this.selected && (this.link.length > SEAL_MAX || this.book !== null) && this.link.indexOf("/") == -1) {            var drawLocation = new p5.Vector(this.anchor.x * width,this.anchor.y * height);            drawLocation.add(this.location.x * w * this.extension,this.location.y * w * this.extension);            drawLocation.sub(camera.anchor);            drawLocation.mult(camera.z);            drawLocation.sub(camera.location);            drawLocation.add(camera.anchor);                        var drawSize = this.size * w * camera.z;                        if (drawLocation.x + (drawSize * 0.5) > 0 && drawLocation.y + (drawSize * 0.5) > 0 && drawLocation.x - (drawSize * 0.5) < width && drawLocation.y - (drawSize * 0.5) < height) {                push()                                if (hovering && !this.touched) {                    fill(100);                }                else {                    fill(255);                }                noStroke();                textFont("Courier New");                                if (mobile) {                    textSize(drawSize * 0.2);                }                else {                    textSize(drawSize * 0.1);                }                                var textBox = this.link;                                if (this.book !== null) {                    textBox = this.book.pages[this.book.bookmark];                }                                if (drawLocation.x >= width/2) {                    if (drawLocation.y < height/2) {                        textAlign(LEFT,BOTTOM);                                                if (mobile) {                            text(textBox,10,drawLocation.y+(drawSize*0.6),width,height - (drawLocation.y+(drawSize*0.6)));                        }                        else {                            text(textBox,10,0,drawLocation.x - (drawSize * 0.6) - textSize(),height);                        }                    }                    else {                        textAlign(LEFT,TOP);                                                if (mobile) {                            text(textBox,10,0,width,drawLocation.y - (drawSize * 0.6));                        }                        else {                            text(textBox,10,0,drawLocation.x - (drawSize * 0.6) - textSize(),height);                        }                    }                }                else {                    if (drawLocation.y < height/2) {                        textAlign(RIGHT,BOTTOM);                                                if (mobile) {                            text(textBox,10,drawLocation.y+(drawSize*0.6),width,height - (drawLocation.y+(drawSize*0.6)));                        }                        else {                            text(textBox,drawLocation.x + (drawSize * 0.6),0,width - (drawLocation.x + (drawSize * 0.5)) - textSize(),height);                        }                    }                    else {                        textAlign(RIGHT,TOP);                                                if (mobile) {                            text(textBox,10,0,width,drawLocation.y - (drawSize * 0.6));                        }                        else {                            text(textBox,drawLocation.x + (drawSize * 0.6),0,width - (drawLocation.x + (drawSize * 0.5)) - textSize(),height);                        }                    }                }                                pop();            }        }    }        this.enableBranches = function() {        for (var i=0; i<this.bubbles.length; i++) {            this.bubbles[i].interact();            this.bubbles[i].extendBranches();            this.bubbles[i].updateAnchor();            this.bubbles[i].enableBranches();        }    }}//---------------------------------- LABELfunction Label(i,n) {    this.image = i;    this.name = n;}//---------------------------------- CAMERAfunction Camera() {    this.location = new p5.Vector(0,0);    this.anchor = new p5.Vector(width/2,height/2);    this.anchorTarget = new p5.Vector(width/2,height/2);    this.anchored = false;    this.speed = 0.2;    this.z = 1;    this.zTarget = 1;        this.move = function() {        if (!this.anchored) {            this.anchorTarget.set(width/2,height/2);        }                var velocity = new p5.Vector();        velocity.set(this.anchorTarget);        velocity.sub(this.anchor);        if (this.zTarget > this.z) {            velocity.mult(this.speed);            this.anchor.add(velocity);        }        else if ((this.z - this.zTarget)/this.z < 0.2) {            velocity.mult(this.speed*0.5);            this.anchor.add(velocity);        }                if (mobile) {            velocity.set(-0.5*width,-0.5*height);        }        else {            velocity.set(mouseX - width,mouseY - height);        }        velocity.add(this.anchor);        velocity.sub(this.location);        velocity.mult(this.speed);        this.location.add(velocity);    }        this.zoom = function() {        if (!this.anchored) {            if (mobile) {                this.zTarget = MOBILE_ZOOM;            }            else {                this.zTarget = 1;            }        }                var change = this.speed * (this.zTarget-this.z);                if (this.zTarget > this.z) {            var velocity = new p5.Vector();            velocity.set(this.anchorTarget);            velocity.sub(this.anchor);                        if (velocity.mag() > 0.01) {                this.z += change / (velocity.mag() * (w/this.z));            }            else {                this.z += change;            }        }        else {            this.z += change;        }    }}//---------------------------------- IMAGE FILE UPLOADfunction uploadFile(file) {    if (file) {        loadImage(window.URL.createObjectURL(file), function(p5Image) {                      imageUpload = circleCrop(p5Image);                  });    }}function circleCrop(img) {    img.loadPixels();        var radius = img.width/2;    if (img.height < img.width) {        radius = img.height/2;    }        var center = new p5.Vector((img.width)/2,(img.height)/2);    var point = new p5.Vector(0,0);    var distance = 0;        for (var y=0; y<img.height; y++) {        for (var x=0; x<img.width; x++) {            point.set(x,y);            point.sub(center);            distance = point.mag();                        if (distance > radius) {                img.set(x,y,color(255,255,255,0)); //set transparent            }        }    }        img.updatePixels();        var tempCanvas = document.createElement("canvas");    tempCanvas.width = img.canvas.width;    tempCanvas.height = img.canvas.height;    tempCanvas.getContext("2d").drawImage(img.canvas,0,0);        img.canvas.width = radius*2;    img.canvas.height = radius*2;    img.width = radius*2;    img.height = radius*2;        img.canvas.getContext("2d").drawImage(tempCanvas,0,0,tempCanvas.width,tempCanvas.height,radius-(tempCanvas.width/2),radius-(tempCanvas.height/2),tempCanvas.width,tempCanvas.height);        return img;}//--------------------------------------------------------------------- OVERRIDES//---------------------------------- FIX CANVASfunction windowResized() {    document.getElementById(parentID).style.width = "100%";    document.getElementById(parentID).style.height = "100%";        resizeCanvas(windowWidth, windowHeight);        w = getDimension();}//---------------------------------- DISABLE SCROLLINGfunction mouseWheel(event) {    return false;}//---------------------------------- DISABLE ZOOMINGfunction mousePressed() {    return false;}//---------------------------------- SELECTIONfunction mouseReleased() {    home.select();    home.originate();        return false;}//---------------------------------- DISABLE SCROLLINGfunction mouseDragged() {    return false;}//---------------------------------- DISABLE SCROLLINGfunction touchMoved() {    return false;}//---------------------------------- DISABLE ZOOMINGfunction touchStarted() {    touchOrigin.x = mouseX;    touchOrigin.y = mouseY;        return false;}//---------------------------------- DISABLE ZOOMING + SELECTIONfunction touchEnded() {    if (touchOrigin.x == mouseX && touchOrigin.y == mouseY) {        home.select();        home.originate();                mouseX = width/2;        mouseY = height/2;    }        return false;}